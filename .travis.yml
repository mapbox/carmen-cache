language: generic

sudo: false

addons:
  apt:
    sources:
     - ubuntu-toolchain-r-test
    packages:
     - libstdc++-4.9-dev

matrix:
  include:
     # Coverage
     - os: osx
       compiler: clang
       env: NODE_VERSION="4" COVERAGE=true
       osx_image: xcode8.2
     # Linux
     - os: linux
       compiler: clang
       env: NODE_VERSION="0.10" # node abi 11
     - os: linux
       compiler: clang
       env: NODE_VERSION="4" # node abi 46
     - os: linux
       compiler: clang
       env: NODE_VERSION="6" # node abi 48
     # OS X
     - os: osx
       compiler: clang
       env: NODE_VERSION="0.10" # node abi 11
       osx_image: xcode8.2
     - os: osx
       compiler: clang
       env: NODE_VERSION="4" # node abi 46
       osx_image: xcode8.2
     - os: osx
       compiler: clang
       env: NODE_VERSION="6" # node abi 48
       osx_image: xcode8.2

env:
  global:
   - JOBS: "8"
   - secure: bLTdbWwf3v8X7yJlLLqPc9BRhFquwma4oYL9T2C38FXzSuqhXJZF+kNXjHd85E4lJNnuLXDjrPJLLkigd70J9Tclu2XQvy3cGzXI+EMsO6rDvQN24Eoi6uJ/qHhTrAoud526ouxO8qk9YYLjD6UWX1EOtqcEdwPMose8L1wsMZI=
   - secure: lmfuNtK0/ubV4ZZobgfeKY6DzG41ZciS4a00yCe29jHLxAg+EEmB/qpsW5d1//cC94OKsAySW08xp2uX5wBVvtryaaoiwU7fdKF9DOxHRHieGw/3+m8NNjELkd5hKMKiqDj7l4QPMchzBQR2PQkoG0UMCGUFe+RmzZ2/iCdGHXU=

before_install:
 # install clang++ via mason
 - mkdir /tmp/mason && curl -sSfL https://github.com/mapbox/mason/archive/v0.5.0.tar.gz | tar --gunzip --extract --strip-components=1 --directory=/tmp/mason
 - /tmp/mason/mason install clang++ 3.9.1
 - export PATH=$(/tmp/mason/mason prefix clang++ 3.9.1)/bin:${PATH}
 - export CXX=clang++-3.9
 - export COVERAGE=${COVERAGE:-false}
 - mkdir -p $(pwd)/.local
 - if [[ $(uname -s) == 'Linux' ]]; then
     export PYTHONPATH=$(pwd)/.local/lib/python2.7/site-packages;
   else
     export PYTHONPATH=$(pwd)/.local/lib/python/site-packages;
   fi;
 - source ./test/install_node.sh ${NODE_VERSION}
 - export PATH=./node_modules/.bin/:$PATH

install:
 - if [[ ${COVERAGE} == true ]]; then
     PYTHONUSERBASE=$(pwd)/.local pip install --user cpp-coveralls;
     export CXXFLAGS="--coverage ${CXXFLAGS}";
     export LDFLAGS="--coverage ${LDFLAGS}";
     npm install --build-from-source --clang=1 --debug;
   else
     npm install --build-from-source --clang=1;
   fi

script:
# only run unit tests (not benchmarks) when built with coverage/debug
# because otherwise the benchmarks will fail since they are slow in debug
- if [[ ${COVERAGE} == true ]]; then
    ./node_modules/.bin/tape test/cache.test.js test/coalesce.test.js test/merge.test.js;
  else
    npm test;
  fi

after_success:
- if [[ ${COVERAGE} == true ]]; then ./.local/bin/cpp-coveralls --exclude node_modules --exclude tests --build-root build --gcov-options '\-lp' --exclude ./deps --exclude build/Release/obj/gen --exclude src/binding.hpp > /dev/null; fi;
- if [[ ${COVERAGE} != true ]]; then ./test/travis-publish.sh; fi;
